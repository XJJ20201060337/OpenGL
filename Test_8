#include <gl/glut.h>
#include <math.h>
#include<stdio.h>

class wcPt2D{
public:
	GLfloat x, y;
};
const GLint winLeftBitCode = 0x1;
const GLint winRightBitCode = 0x2;
const GLint winBottomBitCode = 0x4;
const GLint winTopBitCode = 0x8;

inline GLint round(const GLfloat a) {
	return GLint(a + 0.5);
}

inline int inside(int code) {
	return int(!code);
}

inline int reject(int code1, int code2) {
	return int(code1 & code2);
}

inline int accept(int code1, int code2) {
	return int(!(code1 | code2));
}

GLubyte encode(wcPt2D pt, wcPt2D winMin, wcPt2D winMax) {
	GLubyte code = 0x00;
	if (pt.x < winMin.x)
		code = code | winLeftBitCode;
	if (pt.x > winMax.x)
		code = code | winRightBitCode;
	if (pt.y < winMin.y)
		code = code | winBottomBitCode;
	if (pt.y > winMax.y)
		code = code | winTopBitCode;
	return (code);
}

void swapPts(wcPt2D* p1, wcPt2D* p2) {
	wcPt2D tmp;
	tmp = *p1;
	*p1 = *p2;
	*p2 = tmp;
}

void swapCodes(GLubyte* c1, GLubyte* c2) {
	GLubyte tmp;
	tmp = *c1;
	*c1 = *c2;
	*c2 = tmp;
}

void draw_pixel(int ix, int iy) {
	glBegin(GL_POINTS);
	glVertex2i(ix, iy);
	glEnd();
}

void lineDDA(int x0, int y0, int x_end, int y_end, double a, double b, double c) {
	glColor3f(a, b, c);
	int dx = x_end - x0;
	int dy = y_end - y0;
	int steps, k;
	float xIncrement, yIncrement, x = x0, y = y0;
	if (abs(dx) > abs(dy))
		steps = abs(dx);
	else
		steps = abs(dy);
	xIncrement = float(dx) / float(steps);
	yIncrement = float(dy) / float(steps);
	draw_pixel(round(x), round(y));
	for (k = 0; k < steps; k++) {
		x += xIncrement;
		y += yIncrement;
		draw_pixel(round(x), round(y));
	}
}

void lineClipCoSuth(wcPt2D winMin, wcPt2D winMax, wcPt2D p1, wcPt2D p2) {
	GLubyte code1, code2;
	GLint done = false, plotLine = false;
	GLfloat m;
	while (!done) {
		code1 = encode(p1, winMin, winMax);
		code2 = encode(p2, winMin, winMax);
		if (accept(code1, code2)) {
			done = true;
			plotLine = true;
		}
		else {
			if (reject(code1, code2))
				done = true;
			else {
				if (inside(code1)) {
					swapPts(&p1, &p2);
					swapCodes(&code1, &code2);
				}
				if (p2.x != p1.x)
					m = (p2.y - p1.y) / (p2.x - p1.x);
				if (code1 & winLeftBitCode) {
					p1.y += (winMax.x - p1.x) * m;
					p1.x = winMax.x;
				}
				else {
					if (code1 & winRightBitCode) {
						p1.y += (winMax.x - p1.x) * m;
						p1.x = winMin.x;
					}
					else {
						if (code1 & winBottomBitCode) {
							if (p2.x != p1.x)
								p1.x += (winMin.y - p1.y) / m;
							p1.y = winMin.y;
						}
						else {
							if (code1 & winTopBitCode) {
								if (p2.x != p1.x) {
									p1.x += (winMax.y - p1.y) / m;
								}
								p1.y = winMax.y;
							}
						}
					}
				}
			}
		}
	}
	if (plotLine)
		lineDDA(round(p1.x), round(p1.y), round(p2.x), round(p2.y), 0.0, 0.0, 1.0);
}

void display() {
	glClear(GL_COLOR_BUFFER_BIT);
	wcPt2D winMin, winMax, p1, p2, q1, q2, t1, t2, m1, m2;
	winMin.x = 80;
	winMin.y = 100;
	winMax.x = 290;
	winMax.y = 500;
	lineDDA(80, 100, 80, 450, 1.0, 0.0, 0.0);
	lineDDA(80, 100, 290, 100, 1.0, 0.0, 0.0);
	lineDDA(290, 100, 290, 450, 1.0, 0.0, 0.0);
	lineDDA(80, 450, 290, 450, 1.0, 0.0, 0.0);
	p1.x = 0;
	p1.y = 0;
	p2.x = 400;
	p2.y = 400;
	q1.x = 0;
	q1.y = 0;
	q2.x = 100;
	q2.y = 400;
	t1.x = 100;
	t1.y = 400;
	t2.x = 400;
	t2.y = 400;
	m1.x = 300;
	m1.y = 200;
	m2.x = 100;
	m2.y = 400;
	lineClipCoSuth(winMin, winMax, p1, p2);
	lineClipCoSuth(winMin, winMax, q1, q2);
	lineClipCoSuth(winMin, winMax, t1, t2);
	lineClipCoSuth(winMin, winMax, m1, m2);
	lineDDA(300, 200, 100, 400, 0.0, 0.0, 1.0);
	lineDDA(0, 0, 100, 400, 0.0, 0.0, 1.0);
	lineDDA(100, 400, 400, 400, 0.0, 0.0, 1.0);
	lineDDA(0, 0, 400, 400, 0.0, 0.0, 1.0);
	glFlush();
}

void init() {
	glClearColor(0.8, 1.0, 1.0, 1.0);
	glPointSize(1.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, 500.0, 0.0, 500.0);
	glViewport(0, 0, 200, 500);
}

void main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowPosition(50, 100);
	glutInitWindowSize(400, 300);
	glutCreateWindow("Cosen-Sutherland裁剪算法");
	init();
	glutDisplayFunc(display);
	glutMainLoop();
}